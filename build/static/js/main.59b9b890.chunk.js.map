{"version":3,"sources":["util.js","App.js","serviceWorker.js","index.js"],"names":["plus","value1","value2","parseInt","minus","multiply","divide","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createArray","length","Array","from","map","value","index","changeFirstValue","e","target","state","firstValue","setState","changeSecondValue","secondValue","changeMode","mode","clearInput","result","calculate","_this$state","_this$state2","react_default","a","createElement","className","onChange","key","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59b9b890.chunk.js","sourcesContent":["export const plus = (value1, value2) => {\n  return parseInt(value1) + parseInt(value2);\n}\n\nexport const minus = (value1, value2) => {\n  return parseInt(value1) - parseInt(value2);\n}\n\nexport const multiply = (value1, value2) => {\n  return parseInt(value1) * parseInt(value2);\n}\n\nexport const divide = (value1, value2) => {\n  return parseInt(value1) / parseInt(value2);\n}\n","import React, { Component } from 'react';\nimport { plus, minus, multiply, divide } from './util';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstValue : 0,\n      secondValue : 0,\n      mode: '+',\n      result: 0\n    }\n  }\n\n  render() {\n    const { firstValue, secondValue, mode, result } = this.state;\n    return (\n      <div className=\"App\">\n        <main className=\"calculator-wrap\">\n          <div className=\"container\">\n            <div className=\"content\">\n              <select className=\"number-input\" value={firstValue} onChange={this.changeFirstValue}>\n                {this.createArray(100).map((value, index) => <option key={value} value={value}>{value}</option>)}\n              </select>\n              <select value={mode} onChange={this.changeMode}>\n                <option value=\"+\">+</option>\n                <option value=\"-\">-</option>\n                <option value=\"*\">*</option>\n                <option value=\"/\">/</option>\n              </select>\n              <select className=\"number-input\" value={secondValue} onChange={this.changeSecondValue}>\n                {this.createArray(100).map((value, index) => <option key={value} value={value}>{value}</option>)}\n              </select>\n            </div>\n            <div className=\"footer\">\n              <button onClick={this.clearInput}>clear</button>\n              <button onClick={this.calculate}>Calculate</button>\n            </div>\n          </div>\n\n          <div className=\"aside\">\n            <p>Answer<span>{result ? result : 0}</span></p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  createArray = length => {\n    return Array.from({length}).map((value, index) => index);\n  }\n  changeFirstValue = (e) => {\n    const value = e.target.value;\n    if (value !== this.state.firstValue) {\n      this.setState({\n        firstValue: value\n      })\n    }\n  }\n  changeSecondValue = (e) => {\n    const value = e.target.value;\n    if (value !== this.state.secondValue) {\n      this.setState({\n        secondValue: value\n      })\n    }\n  }\n  changeMode = (e) => {\n    const value = e.target.value;\n    if (value !== this.state.mode) {\n      this.setState({\n        mode: value\n      })\n    }\n  }\n  clearInput = () => {\n    this.setState({\n      firstValue: 0,\n      secondValue: 0,\n      result: 0\n    })\n  }\n  calculate = () => {\n    const { mode, firstValue, secondValue } = this.state;\n    let result = 0;\n    switch (mode) {\n      case \"+\":\n          result = plus(firstValue, secondValue)\n        break;\n      case \"-\":\n          result = minus(firstValue, secondValue)\n        break;\n      case \"*\":\n          result = multiply(firstValue, secondValue)\n        break;\n      case \"/\":\n          result = divide(firstValue, secondValue)\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      result\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}